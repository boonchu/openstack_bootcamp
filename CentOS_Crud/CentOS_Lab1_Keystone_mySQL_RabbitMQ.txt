{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Lab 1: Identity Service Installation\
Objective:\
\'95 Install prerequisites for OpenStack installation in AIO node\
o ntp\
o mysql\
o OpenStack packages\
o Messaging queue server - RabbitMQ Server\
\'95 Configuration and verification of Identity Service Keystone\
Basic Configuration\
Check the Network settings of AIO node \
SSH to AIO node with the credentials in Lab access section (above)\
\
Step 1: \
Enter the following command and type [root] password \
\
$su\
#vi /etc/sysconfig/network-scripts/ifcfg-eth0\
Enter the network details for aioX node as shown below. Only eth0 should have a gateway/dns configuration.\
eth0 10.1.64.1X\
eth1 10.1.65.1X\
The file should look something like below, where in the IP has been made static.\
\
DEVICE="eth0"\
BOOTPROTO="static"\
ONBOOT=\'94yes\'94\
IPV6INIT="yes"\
IPV6_AUTOCONF="yes"\
IPADDR="10.1.64.1X"\
NETMASK="255.255.255.0"\
GATEWAY="10.1.64.1"\
DNS="10.1.1.92"\
TYPE="Ethernet"\
DOMAIN=\'94onecloud\'94\
\
#vi /etc/sysconfig/network-scripts/ifcfg-eth1\
DEVICE="eth1"\
BOOTPROTO="static"\
IPADDR="10.1.65.1X"\
NETMASK="255.255.255.0"\
\
\
#vi /etc/sysconfig/network-scripts/ifcfg-eth2\
DEVICE=eth2\
BOOTPROTO=manual\
TYPE=Ethernet\
ONBOOT=yes\
\
 Note: vi Editor\
                        Press key \'93i\'94 for insert in vi editor\
                 <esc> to get out of edit mode\
                  :wq to save the file\
                  :q! to exit without saving\
\
  Ensure the eth interfaces names:\
User must ensure the CentOS version used. The naming conventions for eth interfaces followed above are for CentOS 6.5 version. The name conventions for CentOS 7 changes. For the network scripts details on CentOS 7 refer to APPENDIX.\
\
Step 2: \
Check the hosts file configuration\
#vi /etc/hosts\
Enter the IP address and host names of aio node and compute01 node. (X - Student POD Number)\
10.1.64.1X	aioX.onecloud				aioX\
10.1.64.1Y	computeY.onecloud			computeY\
10.1.64.1	gw.onecloud				gw\
\
OpenStack Packages\
Step 3:\
This section describes the configuration you must complete after you configure machine to install the OpenStack Icehouse packages.\
\
Type the following commands in terminal which installs python packages and updates, upgrades the various packages to latest versions.\
\
#yum install python -y\
#yum update && upgrade -y\
It takes few minutes to update successfully.\
Step 4: \
Reboot the machine\
\
Type following command to restart network service \
\
#service network restart\
Note: it is ok if the system complains about interfaces not being configured in the previous step\
Prerequisites for OpenStack\
\
NTP Server\
Step 5:  To synchronize services across OpenStack nodes (compute, controller and network).\
#ntpdate gw.onecloud\
24 Aug 22:17:36 ntpdate[1163]: adjust time server 10.1.64.1 offset 0.000462 sec\
#yum install ntp -y\
Edit the /etc/ntp.conf file to point to an accessible ntp server (the default may work as well)\
\
#vi /etc/ntp.conf\
Remove or comment out the following the lines:\
server 0. centos.pool.ntp.or iburst \
server 1. centos.pool.ntp.or iburst\
server 2. centos.pool.ntp.or iburst\
server 3. centos.pool.ntp.or iburst\
\
and add the following line:\
\
server gw.onecloud\
\
Then restart NTP and make sure it\'92s connected to the clock:\
\
#service ntpd restart\
#ntpq -p\
\
     remote           refid      st t when poll reach   delay   offset  jitter\
==============================================================================\
 li506-17.member 209.51.161.238   2 u   60   64    1   74.016   15.343   0.000\
 sola-dal-09.ser 184.173.173.205  3 u   59   64    1   41.609   13.524   0.000\
 tock5.usshc.com .GPS.            1 u   58   64    1   59.961   15.893   0.000\
 199.96.82.197.r 132.163.4.103    2 u   57   64    1   54.124   13.980   0.000\
 golem.canonical 192.93.2.20      2 u   56   64    1  139.331   17.047   0.000\
 gw.onecloud     91.189.94.4      3 u   55   64    1    1.159   14.705   0.000\
MySQL\
Step 6:\
Most of the OpenStack services require a database to store information. Here we are using MySQL for that purpose.\
\
#yum install python-mysqldb mysql-server y\
Installation will prompt for password, Type pass as root password and press Enter.  For this lab, it is important that you stick with the generic passwords and user-ids.  Clearly you would use more secure random strings for a production system.\
 Do not set a random password in the lab, just use the define passwords so that the configurations are consistent!\
\
Step 7:\
Edit /etc/my.cnf and set the bind-address to the IP address of AIO node, to enable access from outside.\
#vi /etc/my.cnf\
Use /bind-address to find the bind-address parameter in [mysqld] section\
Change the bind-address as 10.1.64.1X from its default of 127.0.0.1 so that remote services can access the Mysql service.\
bind-address = 10.1.64.1X\
Add the following lines to my.cnf below the bind-address\
default-storage-engine = innodb\
innodb_file_per_table\
collation-server = utf8_general_ci\
init-connect = 'SET NAMES utf8'\
character-set-server = utf8\
\
 Note:  Using crudini to edit the files\
The openstack-utils package contains utility programs that make installation and configuration easier. The openstack-config program in the openstack-utils package uses crudini to manipulate configuration files. Crudini is a utility package which simplifies the modification of configuration files like .ini, .conf and so on.\
\
Create a POD configuration file which is used by crudini scripts to edit the required files.\
POD configuration file contains the variablized POD elements (variables and values) required for configuration of each service.\
#vi POD_info.py\
#specify  variables used here   \
aioX = '10.1.64.1X'\
cmptY = '10.1.64.1Y'\
#below variables are for glance service installation AIO\
# /etc/glance/glance-api.conf and /etc/glance/glance-registry.conf\
G_rpc_backend = 'rabbit'\
G_rabbit_host = aioX\
G_rabbit_userid = 'guest'\
G_rabbit_password = 'pass'\
admin_tenant_name = 'service'\
G_admin_user = 'glance'\
G_admin_password = 'pass'\
G_mysql_user = 'glance'\
G_mysql_password = 'pass'\
flavor = 'keystone'\
\
#below variables are for compute service installation on AIO\
# /etc/nova/nova.conf\
#[DEFAULT] 		\
my_ip= aioX			\
vncserver_listen= aioX\
vncserver_proxyclient_address= aioX\
#[keystone_authtoken]\
Compute_admin_user = 'nova'\
Compute_admin_password = 'pass'\
Compute_rabbit_userid = 'guest'\
Compute_rabbit_password = 'pass'\
Compute_mysql_user = 'nova'\
Compute_mysql_password = 'pass'\
\
#below variables are for cinder service installation\
CINDER_HOST = aioX\
CINDER_RABBIT_USERID = 'guest'\
CINDER_RABBIT_PASSWORD = 'pass'\
CINDER_ADMIN_USER = 'cinder'\
CINDER_ADMIN_PASSWORD = 'pass'\
CINDER_MYSQL_USER = 'cinder'\
CINDER_MYSQL_PASSWORD = 'pass'\
\
Create python script to edit the /etc/my.cnf file at one go (ensure there exists the correct indentation for the python script),\
#vi crudiniscript_mycnf.py\
#!/usr/bin/python\
\
import os\
from POD_info import  *\
\
def set_crud():\
	#your config file is under /etc/my.cnf\
\
	#create a list of crudini commands in order\
       cmd_execute = [\
'crudini --set  /etc/my.cnf  mysqldbind-address \'91+aioX ,'crudini --set /etc/my.cnf  mysqld default-storage-engine innodb','crudini--set /etc/my.cnf  mysqld innodb_file_per_tablecollation-server utf8_general_ci',\
'crudini --set   /etc/my.cnf  mysqld init-connect \'93SET NAMES utf8 \'93 ',\
\'91crudini --set   /etc/my.cnf  mysqld character-set-server utf8\'92,]\
\
	#iterate through the list of crudini commands and execute them one by one.\
	for c in cmd_execute:\
		os.system(c)\
		print c+' status:- Executed'\
	print "All commands executed successfully"\
\
set_crud()\
\
  Ensure the IP is specified as per your environment and both POD_info.py, crudiniscript_mycnf.py scripts are present in the same directory.\
Run this python script by typing the command as below\
\
#python  crudiniscript_mycnf.py\
Once this crudiniscript_mycnf.py finishes the execution successfully /etc/my.cnf file will have the parameters updated with the desired values at one go. Thus crudini simplifies the process of modifying files. \
\
Step 8: \
Restart the MySQL service to apply the changes.\
#service mysqld restart\
#/usr/bin/mysql_install_db\
#/usr/bin/mysql_secure_installation\
Press Enter for all prompts, yes to keep pass word the same, no to subsequent questions. \
\
Messaging Queue Sever\
Step 9:\
Before installing RabbitMQ, we need to get its main dependencies such as Erlang. However, first and foremost we should update our system and its default applications.\
\
# Add and enable relevant application repositories:\
# Note: We are also enabling third party remi package repositories.\
$sudo rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\
$sudo rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm\
$sudo vim /etc/yum.repos.d/remi.repo\
\
edit the lines:\
---------------\
[remi]\
name=Les RPM de remi pour Enterprise Linux 6 - $basearch\
#baseurl=http://rpms.famillecollet.com/enterprise/6/remi/$basearch/\
mirrorlist=http://rpms.famillecollet.com/enterprise/6/remi/mirror\
\
enabled=1 <<<< change from 0 to 1\
\
gpgcheck=1\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi\
\
failovermethod=priority <<<< new line added\
\
Using crudini to edit the files:\
Lets create a python script to edit /etc/yum.repos.d/remi.repo file\
#vi crudini_remi.py\
#!/usr/bin/python\
import os\
\
def set_crud():\
	#your config file is under /etc/my.cnf\
\
	#create a list of crudini commands in order\
	cmd_execute = ['crudini --set  --existing /etc/yum.repos.d/remi.repo remi name "Les RPM de remi pour Enterprise Linux 6 - $basearch"',\
'crudini --set  --existing /etc/yum.repos.d/remi.repo remi mirrorlist http://rpms.famillecollet.com/enterprise/6/remi/mirror',\
'crudini --set  --existing /etc/yum.repos.d/remi.repo remi enabled 1',\
'crudini --set  --existing /etc/yum.repos.d/remi.repo remi gpgcheck 1 ',\
'crudini --set  --existing /etc/yum.repos.d/remi.repo remi gpgkey file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi',\
'crudini --set  --existing /etc/yum.repos.d/remi.repo remi failovermethod priority ',]\
\
	#iterate through the list of crudini commands and execute them one by one.\
	for c in cmd_execute:\
		os.system(c)\
		print c+' status:- Executed'\
	print "All commands executed successfully"\
\
set_crud()\
 \
Run the script so that crudini edits the file at once,\
Type the command below to run the above python script,\
\
#python crudini_remi.py\
\
Since OpenStack maintaining asynchronous calls between its services, we need a messaging server RabbitMQ server.\
\
#yum install rabbitmq-server -y\
Step 10:\
Change the default guest password of RabbitMQ to pass\
#rabbitmqctl change_password guest pass\
#service rabbitmq-server restart\
#reboot\
Identity Service Keystone\
Step 11:\
Adding REPOs for OpenStack package installation\
\
#yum install yum-plugin-priorities\
\
To enable the RDO repository, download and install the\'a0rdo-release-icehouse\'a0package:\
\
#yum install http://repos.fedorapeople.org/repos/openstack/openstack-icehouse/rdo-release-icehouse-3.noarch.rpm\
\
Install\'a0openstack-utils. This verifies that you can access the RDO repository:\
\
#yum install openstack-utils\
Upgrade your system packages:\
#yum upgrade\
If the upgrade included a new kernel package, reboot the system to ensure the new kernel is running:\
#reboot\
Install the OpenStack identity service on node.\
#yum install openstack-keystone -y\
The Identity Service uses a database to store information. Specify the location of the database in the configuration file. We use a MySQL database with the username keystone. \
\
Step 12:\
Edit /etc/keystone/keystone.conf and change connection in the [database] section for MySQL\
\
#vi /etc/keystone/keystone.conf\
/[database] to find the [database] section\
Change the connection parameter:\
connection = mysql://keystone:pass@aioX/keystone \
\
Press Esc key\
Type :wq for save -the file.\
Keystone Database\
Note: If there exists keystone.db file created in the /var/lib/keystone/ directory remove that by typing below command so that it does not get used by mistake. \
\
#rm /var/lib/keystone/keystone.db\
Step 13: \
Create Keystone database by login to mysql with password as pass \
#mysql \'96uroot \'96ppass\
>CREATE DATABASE keystone;\
>use keystone;\
>GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY 'pass';\
>GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'pass';\
>exit\
Step 14:\
Create the database tables for the Identity Service:\
\
#su -s /bin/sh -c "keystone-manage db_sync" keystone\
Step 15:\
Define an authorization token to use as a shared secret between the Identity Service and other OpenStack services. Edit /etc/keystone/keystone.conf and uncomment to change admin_token with ADMIN_TOKEN in [DEFAULT] section:\
#vi /etc/keystone/keystone.conf\
# Administrative Token\
# admin_token  = ADMIN_TOKEN\
admin_token  = ADMIN_TOKEN\
\
 NOTE: There cannot be a space at the beginning of configuration parameter lines\
\
And uncomment to change token_format with UUID in [signing] section:\
\
# Signing\
# token_format  = <None>\
Token_format  = UUID\
\
\
Using Crudini to Edit keystone.conf:\
\
Create a python script to edit to keystone.conf using crudini,\
\
#vi crudini_keystone.py\
\
#!/usr/bin/python\
import os\
\
def set_crud():\
	#your config file is under /etc/keystone/keystone.conf  \
\
	#create a list of crudini commands in order\
	cmd_execute = ['crudini --set /etc/keystone/keystone.conf   DEFAULT admin_token ADMIN_TOKEN',\
'crudini --set /etc/keystone/keystone.conf  signing  Token_format UUID',]\
\
	#iterate through the list of crudini commands and execute them one by one.\
	for c in cmd_execute:\
		os.system(c)\
		print c+' status:- Executed'\
	print "All commands executed successfully"\
\
set_crud()  \
\
Type the below command to run the script,\
#python crudini_keystone.py\
\
Step 16:\
Restart the Identity Service by typing the below command:\
\
#service openstack-keystone restart\
Define users, tenants and roles\
After you install the Identity Service, set up users, tenants, and roles. These are used to allow access to services and endpoints.\
You would indicate a user and password to authenticate with the Identity Service. At this point, however, we have not created any users, so we have to use the authorization token created in an earlier step.\
You can pass this with the --os-token option to the keystone command or set the OS_SERVICE_TOKEN environment variable. We'll set OS_SERVICE_TOKEN, as well as OS_SERVICE_ENDPOINT to specify where the Identity Service is running.\
Step 17:\
Note: Change X with AIO node Number\
#export OS_SERVICE_TOKEN=ADMIN_TOKEN\
#export OS_SERVICE_ENDPOINT=http://aioX:35357/v2.0\
Create a tenant for an administrative user and a tenant for other OpenStack services\
\
#keystone tenant-create --name=admin --description="Admin Tenant"\
+-------------+-------------------------------------------------------+\
|   Property   |              Value                                               |\
+---------------+-------------------------------- --------------------+\
| description |           Admin Tenant                                   |\
|   enabled    |               True                                                 |                   \
|      id            | 6c7ecac71357496fabf959f70e0681b3   |\
|     name      |              admin                                               |\
+---------------+---------------------------------------------------- +\
\
#keystone tenant-create --name=service --description="Service Tenant"\
+---------------+---------------------------------------------------+\
|   Property   |              Value                                             |\
+---------------+---------------------------------------------------+\
| description |          Service Tenant                                |\
|   enabled    |               True                                              |\
|      id            | 4e05f27ffc7a474db3821ada26b7a5fa |\
|     name      |             service                                            |\
+---------------+---------------------------------------------------+                     \
Create an administrative user called admin with password as pass and an email address for the account.\
\
#keystone user-create --name=admin --pass=pass --email=admin@onecloud.com\
+---------------+---------------------------------------------------+\
| Property    |              Value                                              |\
+--------------+- --------------------------------------------------+\
|  email         |        admin@onecloud.com                     |\
| enabled     |               True                                               |\
|    id             | ffd8ac42900746919a1d9c3307c53445 |\
|   name       |              admin                                             |\
| username |              admin                                              |\
+--------------+----------------------------------------------------+\
\
Create a role for administrative tasks called admin. Any roles you create should map to roles specified in the policy.json files of the various OpenStack services. The default policy files use the admin role to allow access to most services.\
\
#keystone role-create --name=admin\
\
+------------+------------------------------------------------------+\
| Property |              Value                                                 |\
+------------+------------------------------------------------------+\
|    id          |  ec81d33f35484a538d5cb050db8177eb |\
|   name    |              admin                                                |\
+------------+------------------------------------------------------+ \
\
\
Add roles to users. Users always log in with a tenant, and roles are assigned to users within tenants. Add the admin role to the admin user when logging in with the admin tenant.\
\
#keystone user-role-add --user=admin --tenant=admin --role=admin\
We also add a member role and add admin as a member of the admin tenant, otherwise Horizon will not properly load.\
\
#keystone user-role-add --user=admin --role=_member_ --tenant=admin\
Check the user and tenant list\
#keystone user-list\
+-------------------------------------------------+-----------+------------+-------------------------------+\
|                id                                                 |  name   | enabled |       email                         |\
+----------------------------------  --------------+-----------+------------+-------------------------------+\
| ffd8ac42900746919a1d9c3307c53445| admin  |   True    | admin@onecloud.com |\
+--------------------------------------------------+-----------+-----------+--------------------------------+\
#keystone tenant-list \
+--------------------------------------------------+-----------+------------+\
|                id                                                  |   name  | enabled |\
+--------------------------------------------------+-----------+------------+\
| 6c7ecac71357496fabf959f70e0681b3 |  admin  |   True    |\
| 4e05f27ffc7a474db3821ada26b7a5fa | service  |   True    |\
+--------------------------------------------------+------------+---------- +\
Define services and service endpoints\
You must register each service in your OpenStack installation, so that the Identity Service can track which OpenStack services are installed and where they are located on the network. To register a service, run these commands:\
\
\'95	keystone service-create	 (Describes the service)\
\'95	keystone endpoint-create	 (Associates API endpoints with the service)\
\
Step 18:\
Create a service entry for the Identity Service:\
#keystone service-create --name=keystone --type=identity --description="Keystone Identity Service"\
\
+--------------------+--------------------------------------------------+\
|   Property          |              Value                                            |\
+--------------------+---------------------------------------------------+\
| description       |    Keystone Identity Service                    | \
|   enabled          |               True                                               |\
|      id                  | aa421d6640fc4f6b8e697a800f6515ea |\
|     name            |             keystone                                         |\
|     type              |             identity                                            |\
+-------------------+----------------------------------------------------+\
\
When you specify an endpoint, you provide URLs for the public API, internal API, and admin API. Note that the Identity Service uses a different port for the admin API.\
The service ID is randomly generated and is different from the one shown here. The following command will create a keystone identity service endpoint with service-id value from the keystone service-create command.\
Note: Copy the Service id to use in endpoint-create command. Or we can use keystone service-list | awk '/ identity / \{print $2\}' to get the service id of type identity.\
Note: Change X with AIO node Number\
\
#keystone endpoint-create --service-id=$(keystone service-list | awk '/ identity / \{print $2\}') --publicurl=http://aioX:5000/v2.0  --internalurl=http://aioX:5000/v2.0 --adminurl=http://aioX:35357/v2.0\
+------------------+-----------------------------------------------------+\
|   Property       |              Value                                                |\
+------------------+-----------------------------------------------------+\
|   adminurl      |     http://aio51:35357/v2.0                        |\
|      id                | c56a01e470d940eda883328b45d0be19 |\
| internalurl     |      http://aio51:5000/v2.0                          |\
|  publicurl       |      http://aio51:5000/v2.0                          |\
|    region         |            regionOne                                           |\
|  service_id    | aa421d6640fc4f6b8e697a800f6515ea   |\
+-----------+---------------------------------+\
\
Verify the Identity Service Installation\
To verify the Identity Service is installed and configured correctly, first unset the OS_SERVICE_TOKEN and OS_SERVICE_ENDPOINT environment variables. These were only used to bootstrap the administrative user and register the Identity Service.\
\
Step 19:\
#unset OS_SERVICE_TOKEN OS_SERVICE_ENDPOINT\
You can now use regular username-based authentication. Request an authentication token using the admin user and the password you chose during the earlier administrative user-creation step. \
\
#keystone --os-username=admin --os-password=pass --os-auth-url=http://aioX:35357/v2.0 token-get\
You should receive a token in response, paired with your user ID. This verifies that keystone is running on the expected endpoint, and that your user account is established with the expected credentials.(scroll up in ssh windows to see the user ID)\
Next, verify that authorization is behaving as expected by requesting authorization on a tenant. \
\
#keystone --os-username=admin --os-password=pass --os-tenant-name=admin --os-auth-url=http://aioX:35357/v2.0 token-get\
You should receive a new token in response, this time including the ID of the tenant you specified. This verifies that your user account has an explicitly defined role on the specified tenant, and that the tenant exists as expected.\
\
Step 20:\
You can also set your --os-* variables in your environment to simplify command-line usage. Setup a openrc.sh file with the admin credentials and admin endpoint.\
\
\
#vi ~/openrc.sh\
Enter following line in the openrc.sh file by pressing key \'93i\'94 to insert.\
export OS_USERNAME=admin\
export OS_PASSWORD=pass\
export OS_TENANT_NAME=admin\
export OS_AUTH_URL=http://aioX:35357/v2.0\
\
Press Esc and Type :wq to save the file.\
\
You can source this file to read in the environment variables.\
\
Step 21:\
\
#source ~/openrc.sh\
Verify that your openrc.sh file is configured correctly by performing the same command as above, but without the --os-* arguments.\
\
#keystone token-get\
The command returns a token and the ID of the specified tenant. This verifies that you have configured your environment variables correctly.\
Finally, verify that your admin account has authorization to perform administrative commands.\
\
#keystone user-list\
+----------------------------------------------------+----------+------------+--------------------------------+\
|                            id                                         |  name | enabled |       email                          |\
+----------------------------------------------------+----------+------------+--------------------------------+\
| ffd8ac42900746919a1d9c3307c53445  | admin |   True      | admin@onecloud.com |\
+----------------------------------------------------+----------+------------+--------------------------------+\
\
This verifies that your user account has the admin role, which matches the role used in the Identity Service policy.json file.\
\
Identity service and prerequisites are installed successfully.\
\
\
\
}